params:
  seed: ${...seed}
  
  algo:
    name: near_continuous

  model:
    name: continuous_a2c_logstd

  network:
    name: actor_critic
    separate: True
    space:
      continuous:
        mu_activation: None
        sigma_activation: None
        mu_init:
          name: default
          # scale: 0.02
        sigma_init:
          # The neural network predicts actions by learning the mean and covariance for a gaussian distribution. With const_initializer, the covariance can be fixed to a certain value. Actions are sampled using a normal_dist(learnt_mu, exp(learnt_sigma)). 
          name: const_initializer
          val: -2.9
        fixed_sigma: True
        learn_sigma: False
    mlp:
      units: [1024, 512]
      activation: relu
      d2rl: False
      initializer:
          name: default
          # scale: 2
      regularizer:
        name: None

  load_checkpoint: ${if:${...checkpoint},True,False} #Training checkpint. Set to True if the main config has a checkpoint given. Is irrelevant when playing policies
  load_path: ${...checkpoint} # path to the checkpoint to load


  config:
    name: ${resolve_default:HumanoidNEAR,${....experiment}}
    full_experiment_name: ${.name}
    env_name: rlgpu
    # ppo: True
    # multi_gpu: ${....multi_gpu}
    mixed_precision: False
    normalize_input: True
    normalize_value: True
    value_bootstrap: True
    num_actors: ${....task.env.numEnvs} # num_envs to run
    reward_shaper:
      scale_value: 1.
    normalize_advantage: True
    gamma: 0.99
    tau: 0.95
    learning_rate: 5e-5
    lr_schedule:  constant
    kl_threshold: 0.008 # only used for adaptive lr_schedule
    score_to_win: 50000 # Training stops if reached
    max_frames: ${resolve_default:10e6,${....max_iterations}}
    save_best_after: 50
    save_frequency: 30
    print_stats: True
    grad_norm: 1.0
    entropy_coef: 0.0
    truncate_grads: False
    e_clip: 0.2
    horizon_length: 16
    minibatch_size: 2048 # batch_size % minibatch_size == 0 | batch_size = horizon_len * num_actors * num_agents       
    mini_epochs: 6
    critic_coef: 5
    clip_value: False
    # seq_len: 4
    bounds_loss_coef: 10
    
    
    
    # NEAR Params
    near_config:
      
      training:
        batch_size: 128
        buffer_size: 10000
        # An epoch of training contains several iters. An iter is one minibatch of training.
        n_epochs: 50000
        # Use n_iters as a stop criteria with n_epochs set to some upper bound.
        n_iters: 180000
        ngpu: 1
        snapshot_freq: 10000
        algo: 'dsm'
        anneal_power: 2.0
        normalize_energynet_input: True

      data:
        dataset: "humanoid"
        
        # Copying over env and sim params from the task cfg. These will be used to instantiate the motion library
        numEnvs: ${......task.env.numEnvs}
        physics_engine: ${......task.physics_engine}
        use_gpu_pipeline: ${......task.sim.physx.num_threads}
        num_threads: ${......task.sim.use_gpu_pipeline}
        solver_type: ${......task.sim.physx.solver_type}
        num_subscenes: ${......task.sim.physx.num_subscenes}
        use_gpu: ${......task.sim.physx.use_gpu}
        
        # motion_file: ${....task.env.motion_file}
        # motion file passed through env params
        env_params: ${......task.env}
        sim_params: ${......task.sim}
      
      model:
        sigma_begin: 20
        sigma_end: 0.01
        L: 50
        # number of features in an observation
        in_dim: 105
        # needed for standardization computation
        numObsSteps: ${......task.env.numObsSteps}
        encoder_hidden_layers: [512, 1024]
        latent_space_dim: 2048
        decoder_hidden_layers: [1024, 512, 128]
        # The out dim is set to 1 internally (out_dim: 1)
        # Whether to encode a temporal feature in the state transition pair when training
        encode_temporal_feature: False
        # If using temporal features, temporal_enb_dim is the dimensionality of the temporal embedding vector
        temporal_emb_dim: 8
        # Whether to use exponentially moving average of network weights during inference (ncsn-v2)
        ema: True
        ema_rate: 0.999
        # Whether to use the modifications proposed in ncsnv2
        ncsnv2: True
        
      optim:
        weight_decay: 0.0
        optimizer: "Adam"
        lr: 1e-5
        # ADAM beta (default: 0.9)
        beta1: 0.9
        # Whether to use AMSGrad
        amsgrad: false
        # Whether to use gradient clipping and the max norm of grads. Set to 0.0 for no clipping
        grad_clip_norm: 1.0
        # Weight initialisation : set to "default" for uniform
        param_init: xavier_uniform
      
      # Used to visualise learnt energies. Not relevant for high dimensional datasets  
      visualise:
        plot3d: True
        colormask: True
        plot_train_data: True

      # Change these to use the learnt energies to train a policy
      inference:
        task_reward_w: 0.0
        energy_reward_w: 1.0
        sigma_level: 5 # Must be in range(0,L). If sigma_level = -1 then annealing is used.
        # Relative to the train.py file
        # Frequency at which to evaluate the model's performance. Comment out or set to 0 to skip this 
        perf_metrics_freq: 30
        eb_model_checkpoint: "ncsn_runs/Humanoid_SM_temporal_states_walk/nn/checkpoint.pth"
        # The running mean is used for standardization. Only used when normalize_energynet_input is true
        running_mean_std_checkpoint: "ncsn_runs/Humanoid_SM_temporal_states_walk/nn/running_mean_std.pth"


    player:
      render: True
      render_sleep: 0.01 # Determines frame rate (how many seconds to wait between two frames)
      games_num: 5 # Number of games to play
