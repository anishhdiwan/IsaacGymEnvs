params:
  seed: ${...seed}
  
  algo:
    name: dmp_continuous

  model:
    name: continuous_a2c_logstd

  network:
    name: actor_critic
    separate: True
    space:
      continuous:
        mu_activation: None
        sigma_activation: None
        mu_init:
          name: default
          scale: 0.02
        sigma_init:
          # The neural network predicts actions by learning the mean and covariance for a gaussian distribution. With const_initializer, the covariance can be fixed to a certain value. Actions are sampled using a normal_dist(learnt_mu, exp(learnt_sigma)). 
          name: const_initializer
          val: -3.0
        fixed_sigma: True
    mlp:
      units: [1024, 512]
      activation: relu
      initializer:
          name: default
          scale: 2

  load_checkpoint: ${if:${...checkpoint},True,False} #Training checkpint. Set to True if the main config has a checkpoint given. Is irrelevant when playing policies
  load_path: ${...checkpoint} # path to the checkpoint to load


  config:
    name: ${resolve_default:humanoidDMP,${....experiment}}
    full_experiment_name: ${.name}
    max_epochs: ${resolve_default:5000,${....max_iterations}}
    env_name: rlgpu
    # Gets passed on the the multi-env class
    env_config:
      seed: ${resolve_default:-1,${.....seed}}
    reward_shaper:
      scale_value: 1.
    normalize_advantage: True
    gamma: 0.99
    tau: 0.9

    learning_rate: 5e-5
    score_to_win: 250 # Training stops if reached
    save_best_after: 50
    save_frequency: 30
    grad_norm: 0.5
    entropy_coef: 0.0
    truncate_grads: False
    e_clip: 0.2
    clip_value: False
    num_actors: ${....task.env.numEnvs} #16 num_envs to run
    horizon_length: 32
    minibatch_size: 16 # batch_size % minibatch_size == 0 | batch_size = horizon_len * num_actors * num_agents   
    mini_epochs: 4
    critic_coef: 1
    lr_schedule:  constant
    kl_threshold: 0.008
    normalize_input: True
    normalize_value: True
    value_bootstrap: True
    bounds_loss_coef: 0
    mixed_precision: False
    print_stats: True
    
    # DMP Params
    dmp_config:
      
      training:
        batch_size: 128
        buffer_size: 10000
        n_epochs: 500000
        n_iters: 50000
        ngpu: 1
        snapshot_freq: 5000
        algo: 'dsm'
        anneal_power: 2.0
        normalize_energynet_input: True

      data:
        dataset: "humanoid"
        
        # Copying over env and sim params from the task cfg. These will be used to instantiate the motion library
        numEnvs: ${......task.env.numEnvs}
        physics_engine: ${......task.physics_engine}
        use_gpu_pipeline: ${......task.sim.physx.num_threads}
        num_threads: ${......task.sim.use_gpu_pipeline}
        solver_type: ${......task.sim.physx.solver_type}
        num_subscenes: ${......task.sim.physx.num_subscenes}
        use_gpu: ${......task.sim.physx.use_gpu}
        
        # motion_file: ${....task.env.motion_file}
        # motion file passed through env params
        env_params: ${......task.env}
        sim_params: ${......task.sim}
      
      model:
        sigma_begin: 1
        sigma_end: 0.01
        L: 10
        # number of features in an observation
        in_dim: 105
        # needed for standardization computation
        numObsSteps: ${......task.env.numObsSteps}
        encoder_hidden_layers: [32, 64]
        latent_space_dim: 128
        decoder_hidden_layers: [64, 32, 8]
        # The out dim is set to 1 internally (out_dim: 1) 
        
      optim:
        weight_decay: 1e-5
        optimizer: "Adam"
        lr: 0.0001
        beta1: 0.9
        amsgrad: false
      
      # Used to visualise learnt energies. Not relevant for high dimensional datasets  
      visualise:
        plot3d: True
        colormask: True
        plot_train_data: True

      # Change these to use the learnt energies to train a policy
      inference:
        task_reward_w: 1.0
        energy_reward_w: 0.0
        sigma_level: 9 # Must be in range(0,L)
        # Relative to the train.py file
        eb_model_checkpoint: "ncsn_runs/mazeDMP_NCSN_11-16-29-10/nn/checkpoint.pth"
        # The running mean is used for standardization. Only used when normalize_energynet_input is true
        running_mean_std_checkpoint: "ncsn_runs/mazeDMP_NCSN_11-16-29-10/nn/running_mean_std.pth"


    player:
      render: True
      render_sleep: 0.01 # Determines frame rate (how many seconds to wait between two frames)
      games_num: 5 # Number of games to play
