params:  
  algo:
    name: a2c_continuous

  model:
    name: continuous_a2c_logstd

  network:
    name: actor_critic
    separate: True
    space:
      continuous:
        mu_activation: None
        sigma_activation: None
        mu_init:
          name: default
          scale: 0.02
        sigma_init:
          # The neural network predicts actions by learning the mean and covariance for a gaussian distribution. With const_initializer, the covariance can be fixed to a certain value. Actions are sampled using a normal_dist(learnt_mu, exp(learnt_sigma)). 
          name: const_initializer
          val: -2.0
        fixed_sigma: True
    mlp:
      units: [1024, 512]
      activation: relu
      initializer:
          name: default
          scale: 2

  load_checkpoint: ${if:${...checkpoint},True,False} #Training checkpint. Set to True if the main config has a checkpoint given. Is irrelevant when playing policies
  load_path: ${...checkpoint} # path to the checkpoint to load

  config:
    name: ${resolve_default:maze,${....experiment}}
    full_experiment_name: ${.name}
    max_epochs: ${resolve_default:5000,${....max_iterations}}
    env_name:  gym_env
    # Gets passed on the the multi-env class
    env_config:
      seed: ${resolve_default:-1,${.....seed}}
    reward_shaper:
      scale_value: 1.
    normalize_advantage: True
    gamma: 0.99
    tau: 0.9

    learning_rate: 5e-5
    score_to_win: 250 # Training stops if reached
    save_best_after: 50
    save_frequency: 30
    grad_norm: 0.5
    entropy_coef: 0.0
    truncate_grads: False
    e_clip: 0.2
    clip_value: False
    num_actors: ${....task.env.numEnvs} #16 num_envs to run
    horizon_length: 32
    minibatch_size: 16 # batch_size % minibatch_size == 0 | batch_size = horizon_len * num_actors * num_agents   
    mini_epochs: 4
    critic_coef: 1
    lr_schedule:  constant
    kl_threshold: 0.008
    normalize_input: True
    normalize_value: True
    value_bootstrap: True
    bounds_loss_coef: 0
    mixed_precision: False
    print_stats: True

    player:
      render: True
      render_sleep: 0.01 # Determines frame rate (how many seconds to wait between two frames)
      games_num: 5 # Number of games to play
